name: CI/CD Pipeline - Build and Deploy

on:
  push:
    branches:
      - main # Triggers on push to the main branch

# Define global environment variables
env:
  REGISTRY: ghcr.io
  # Use a clear tag based on your app name
  DOCKER_IMAGE_TAG: aroy-web-app:latest 
  # Set the remote deployment directory once
  REMOTE_DIR: /var/www/aroy-app/

jobs:
  # ----------------------------------------------------------------------
  # 1. CI Job: Build and Push Docker Image
  # ----------------------------------------------------------------------
  build-and-push:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write # Required to push to GHCR
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # Use default GitHub token

      - name: Build and Push Docker image
        # ✅ FIX: Using the correct action name: 'build-push-action'
        uses: docker/build-push-action@v5 
        with:
          context: . 
          push: true
          # Define the full tag path
          tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ----------------------------------------------------------------------
  # 2. CD Job: Deploy to Remote Server
  # ----------------------------------------------------------------------
  deploy:
    needs: build-and-push 
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository (Needed to copy docker-compose.yml)
        uses: actions/checkout@v4
      
      # Step A: Ensure the deployment directory exists on the remote server
      - name: Prepare Remote Deployment Directory
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Create the target directory if it doesn't exist
            mkdir -p ${{ env.REMOTE_DIR }}
            
      # Step B: Copy the docker-compose.yml file to the remote server
      - name: Copy docker-compose.yml to remote server
        # This companion action uses SCP to transfer files
        uses: appleboy/scp-action@v0.1.7 
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: 'docker-compose.yml' # The file in your repo root
          target: ${{ env.REMOTE_DIR }} # The target directory on the remote server
          
      # Step C: Execute Deployment Commands via SSH
      - name: Run Deployment Script via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          
          # This script will run on the remote server
          script: |
            # Move to the directory containing the docker-compose.yml
            cd ${{ env.REMOTE_DIR }}
            
            # Log in to GHCR (required to pull the private image)
            # ⚠️ Ensure GHCR_PAT is a valid Personal Access Token with 'read:packages' scope
            echo "${{ secrets.GHCR_PAT }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            
            # Define the full image path
            IMAGE_PATH=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_TAG }}

            echo "Pulling image: $IMAGE_PATH"
            # Pull the newly built image
            docker pull $IMAGE_PATH
            
            # Restart the containers using the docker-compose file in the current directory
            # 'up -d --force-recreate' ensures the new image is used
            docker-compose up -d --force-recreate
            
            echo "Deployment successful on remote server."
